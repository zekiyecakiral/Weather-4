{"ast":null,"code":"var _jsxFileName = \"/Users/HackYourFuture/Desktop/Week4/homework/weather-app-4/src/Forecast.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport Chart from \"./Chart\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Error from \"./Error\";\nimport Button from '@material-ui/core/Button';\nconst API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\nfunction Forecast() {\n  const {\n    cityName\n  } = useParams();\n  const history = useHistory();\n  const [dataToDraw, setDataToDraw] = useState([]);\n  const [hasError, setError] = useState(false);\n\n  const fetchForecast = async name => {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${name}&units=metric&appid=${API_KEY}`);\n      let fiveDaysData = await response.json();\n      console.log(fiveDaysData);\n      let fiveDaysForecast = [];\n\n      for (let i = 0; i < fiveDaysData.list.length; i++) {\n        fiveDaysForecast = [...fiveDaysForecast, {\n          name: fiveDaysData.list[i].dt_txt,\n          \"°C\": fiveDaysData.list[i].main.temp\n        }];\n      }\n\n      return fiveDaysForecast;\n    } catch (error) {\n      setError(true);\n      console.error(error);\n    }\n\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${name}&units=metric&appid=${API_KEY}`).then(resp => {\n      if (!resp.ok) {\n        throw Error(resp.statusText);\n      }\n\n      return resp.json();\n    }).then(response => {\n      const {\n        name,\n        sys: {\n          country\n        },\n        main: {\n          temp_max,\n          temp_min\n        },\n        weather: [{\n          main,\n          description\n        }],\n        coord: {\n          lat,\n          lon\n        }\n      } = response;\n      setCities([...cities, {\n        description: {\n          name,\n          country,\n          main,\n          description,\n          lat,\n          lon,\n          temp_max,\n          temp_min\n        },\n        id: Date.now()\n      }]);\n      setHasError(false);\n    }).catch(error => {\n      setHasError(true);\n    });\n  };\n\n  function navigateToHome() {\n    history.push(\"/\");\n  }\n\n  useEffect(() => {\n    fetchDetails(cityName).then(data => setDataToDraw(data));\n  }, []);\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 10\n    }\n  }, \"5 day forecast\"), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, cityName), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, hasError && /*#__PURE__*/React.createElement(Error, {\n    message: \"Oppsss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 24\n    }\n  }), !hasError && /*#__PURE__*/React.createElement(Chart, {\n    dataToDraw: dataToDraw,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: navigateToHome,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, \"Home\")));\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/HackYourFuture/Desktop/Week4/homework/weather-app-4/src/Forecast.js"],"names":["React","useEffect","useState","useParams","useHistory","Chart","Card","CardContent","Typography","Error","Button","API_KEY","process","env","REACT_APP_OPENWEATHERMAP_API_KEY","Forecast","cityName","history","dataToDraw","setDataToDraw","hasError","setError","fetchForecast","name","response","fetch","fiveDaysData","json","console","log","fiveDaysForecast","i","list","length","dt_txt","main","temp","error","then","resp","ok","statusText","sys","country","temp_max","temp_min","weather","description","coord","lat","lon","setCities","cities","id","Date","now","setHasError","catch","navigateToHome","push","fetchDetails","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,gCAA5B;;AAEA,SAASC,QAAT,GAAoB;AAClB,QAAM;AAAEC,IAAAA;AAAF,MAAeb,SAAS,EAA9B;AACA,QAAMc,OAAO,GAAGb,UAAU,EAA1B;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACkB,QAAD,EAAWC,QAAX,IAAuBnB,QAAQ,CAAC,KAAD,CAArC;;AAEA,QAAMoB,aAAa,GAAG,MAAOC,IAAP,IAAgB;AACpC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,sDAAqDF,IAAK,uBAAsBZ,OAAQ,EAD/D,CAA5B;AAGA,UAAIe,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAzB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AAEA,UAAII,gBAAgB,GAAG,EAAvB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,YAAY,CAACM,IAAb,CAAkBC,MAAtC,EAA8CF,CAAC,EAA/C,EAAmD;AACjDD,QAAAA,gBAAgB,GAAG,CACjB,GAAGA,gBADc,EAEjB;AACEP,UAAAA,IAAI,EAAEG,YAAY,CAACM,IAAb,CAAkBD,CAAlB,EAAqBG,MAD7B;AAEE,gBAAMR,YAAY,CAACM,IAAb,CAAkBD,CAAlB,EAAqBI,IAArB,CAA0BC;AAFlC,SAFiB,CAAnB;AAQD;;AAED,aAAON,gBAAP;AACD,KApBD,CAoBE,OAAOO,KAAP,EAAc;AACdhB,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAO,MAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACD;;AAEDZ,IAAAA,KAAK,CAAE,sDAAqDF,IAAK,uBAAsBZ,OAAQ,EAA1F,CAAL,CACG2B,IADH,CACSC,IAAD,IAAU;AACd,UAAI,CAACA,IAAI,CAACC,EAAV,EAAc;AACZ,cAAM/B,KAAK,CAAC8B,IAAI,CAACE,UAAN,CAAX;AACD;;AACD,aAAOF,IAAI,CAACZ,IAAL,EAAP;AACD,KANH,EAOGW,IAPH,CAOSd,QAAD,IAAc;AAClB,YAAM;AACJD,QAAAA,IADI;AAEJmB,QAAAA,GAAG,EAAE;AAAEC,UAAAA;AAAF,SAFD;AAGJR,QAAAA,IAAI,EAAE;AAAES,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,SAHF;AAIJC,QAAAA,OAAO,EAAE,CAAC;AAAEX,UAAAA,IAAF;AAAQY,UAAAA;AAAR,SAAD,CAJL;AAKJC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,GAAF;AAAOC,UAAAA;AAAP;AALH,UAMF1B,QANJ;AAOA2B,MAAAA,SAAS,CAAC,CACR,GAAGC,MADK,EAER;AACEL,QAAAA,WAAW,EAAE;AACXxB,UAAAA,IADW;AAEXoB,UAAAA,OAFW;AAGXR,UAAAA,IAHW;AAIXY,UAAAA,WAJW;AAKXE,UAAAA,GALW;AAMXC,UAAAA,GANW;AAOXN,UAAAA,QAPW;AAQXC,UAAAA;AARW,SADf;AAWEQ,QAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL;AAXN,OAFQ,CAAD,CAAT;AAgBAC,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KAhCH,EAiCGC,KAjCH,CAiCUpB,KAAD,IAAW;AAChBmB,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAnCH;AAsCD,GAhED;;AAkEA,WAASE,cAAT,GAA0B;AACxBzC,IAAAA,OAAO,CAAC0C,IAAR,CAAa,GAAb;AACD;;AAED1D,EAAAA,SAAS,CAAC,MAAM;AACd2D,IAAAA,YAAY,CAAC5C,QAAD,CAAZ,CAAuBsB,IAAvB,CAA6BuB,IAAD,IAAU1C,aAAa,CAAC0C,IAAD,CAAnD;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADL,eAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG7C,QADH,CADF,eAKE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,QAAQ,iBAAI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADf,EAEG,CAACA,QAAD,iBAAa,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAEF,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFhB,CALF,eASE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,WAAlC;AAA8C,IAAA,OAAO,EAAEwC,cAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,CAFF,CADF;AAkBD;;AAED,eAAe3C,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport Chart from \"./Chart\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Error from \"./Error\";\nimport Button from '@material-ui/core/Button';\n\nconst API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\nfunction Forecast() {\n  const { cityName } = useParams();\n  const history = useHistory();\n  const [dataToDraw, setDataToDraw] = useState([]);\n  const [hasError, setError] = useState(false);\n\n  const fetchForecast = async (name) => {\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${name}&units=metric&appid=${API_KEY}`\n      );\n      let fiveDaysData = await response.json();\n      console.log(fiveDaysData);\n\n      let fiveDaysForecast = [];\n      for (let i = 0; i < fiveDaysData.list.length; i++) {\n        fiveDaysForecast = [\n          ...fiveDaysForecast,\n          {\n            name: fiveDaysData.list[i].dt_txt,\n            \"°C\": fiveDaysData.list[i].main.temp,\n          },\n        ];\n       \n      }\n\n      return fiveDaysForecast;\n    } catch (error) {\n      setError(true);\n      console.error(error);\n    }\n\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${name}&units=metric&appid=${API_KEY}`)\n      .then((resp) => {\n        if (!resp.ok) {\n          throw Error(resp.statusText);\n        }\n        return resp.json();\n      })\n      .then((response) => {\n        const {\n          name,\n          sys: { country },\n          main: { temp_max, temp_min },\n          weather: [{ main, description }],\n          coord: { lat, lon },\n        } = response;\n        setCities([\n          ...cities,\n          {\n            description: {\n              name,\n              country,\n              main,\n              description,\n              lat,\n              lon,\n              temp_max,\n              temp_min,\n            },\n            id: Date.now(),\n          },\n        ]);\n        setHasError(false);\n      })\n      .catch((error) => {\n        setHasError(true);\n      });\n\n\n  };\n\n  function navigateToHome() {\n    history.push(\"/\");\n  }\n\n  useEffect(() => {\n    fetchDetails(cityName).then((data) => setDataToDraw(data));\n  }, []);\n\n  return (\n    <Card> \n         <h1>5 day forecast</h1>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          {cityName}\n        </Typography>\n\n        <Typography>\n          {hasError && <Error message=\"Oppsss\" />}\n          {!hasError && <Chart dataToDraw={dataToDraw} />}\n        </Typography>\n        <Button variant=\"contained\" color=\"secondary\" onClick={navigateToHome}>\n            Home\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}