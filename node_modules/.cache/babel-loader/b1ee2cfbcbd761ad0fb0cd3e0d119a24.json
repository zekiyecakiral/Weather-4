{"ast":null,"code":"var _jsxFileName = \"/Users/HackYourFuture/Desktop/Week4/homework/weather-app-4/src/Weather.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\nimport { fetchWeather } from \"./api/index\";\nexport default function Weather() {\n  const [cities, setCities] = useState([]);\n  const [hasError, setHasError] = useState(false);\n  const [city, setCity] = useState(\"\"); //   const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n  //   const getWeather = (cityName) => {\n  //     const END_POINT = `http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric`;\n  //     fetch(END_POINT)\n  //       .then((resp) => {\n  //         if (!resp.ok) {\n  //           throw Error(resp.statusText);\n  //         }\n  //         return resp.json();\n  //       })\n  //       .then((response) => {\n  //         const {\n  //           name,\n  //           sys: { country },\n  //           main: { temp_max, temp_min },\n  //           weather: [{ main, description }],\n  //           coord: { lat, lon },\n  //         } = response;\n  //         setCities([\n  //           ...cities,\n  //           {\n  //             description: {\n  //               name,\n  //               country,\n  //               main,\n  //               description,\n  //               lat,\n  //               lon,\n  //               temp_max,\n  //               temp_min,\n  //             },\n  //             id: Date.now(),\n  //           },\n  //         ]);\n  //         setHasError(false);\n  //       })\n  //       .catch((error) => {\n  //         setHasError(true);\n  //       });\n  //   };\n\n  const searchCityWeather = () => {\n    // getWeather(city);\n    // setCity(\"\");\n    const weatherData = fetchWeather(city);\n    weatherData.then(response => console.log(response));\n    setCity(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: \"input\",\n    id: \"outlined-basic\",\n    label: \"City\",\n    variant: \"outlined\",\n    value: city,\n    onChange: event => {\n      setCity(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: searchCityWeather,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"Search\")), hasError && /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \" \", /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \" \", /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"ERROR\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Please be sure to enter a meaningful city name!\"))), cities.map(city => /*#__PURE__*/React.createElement(Card, {\n    className: \"container\",\n    key: city.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, city.description.name, \", \", city.description.country, \" \"), /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, city.description.main), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, city.description.description, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, \"min temp: \"), \" \", city.description.temp_min, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, \"max temp: \"), \" \", city.description.temp_max)), /*#__PURE__*/React.createElement(HighlightOffIcon, {\n    color: \"secondary\",\n    style: {\n      fontSize: 40\n    },\n    onClick: () => {\n      const selectedId = city.id;\n      const remainingCities = cities.filter(item => item.id !== selectedId);\n      setCities(remainingCities);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/HackYourFuture/Desktop/Week4/homework/weather-app-4/src/Weather.js"],"names":["React","useState","Button","TextField","Card","CardContent","Typography","HighlightOffIcon","fetchWeather","Weather","cities","setCities","hasError","setHasError","city","setCity","searchCityWeather","weatherData","then","response","console","log","event","target","value","map","id","description","name","country","main","temp_min","temp_max","fontSize","selectedId","remainingCities","filter","item"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,SAAQC,YAAR,QAA2B,aAA3B;AAEA,eAAe,SAASC,OAAT,GAAmB;AAChC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC,CAHgC,CAKlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,QAAMe,iBAAiB,GAAG,MAAM;AAC9B;AACA;AACA,UAAMC,WAAW,GAAGT,YAAY,CAACM,IAAD,CAAhC;AACAG,IAAAA,WAAW,CAACC,IAAZ,CAAiBC,QAAQ,IAAIC,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAA7B;AACAJ,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAND;;AAQA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,UAAU,MAAhB;AAAiB,IAAA,YAAY,EAAC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,EAAE,EAAC,gBAFL;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,OAAO,EAAC,UAJV;AAKE,IAAA,KAAK,EAAED,IALT;AAME,IAAA,QAAQ,EAAGQ,KAAD,IAAW;AACnBP,MAAAA,OAAO,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAWE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,KAAK,EAAC,WAFR;AAGE,IAAA,OAAO,EAAER,iBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,CADF,EAqBGJ,QAAQ,iBACP,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,eAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,eAEE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAwC,IAAA,KAAK,EAAC,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,eAKE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,KAAK,EAAC,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDALF,CAFF,CAtBJ,EAoCGF,MAAM,CAACe,GAAP,CAAYX,IAAD,iBACV,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,WAAhB;AAA4B,IAAA,GAAG,EAAEA,IAAI,CAACY,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,IAAI,CAACa,WAAL,CAAiBC,IADpB,QAC4Bd,IAAI,CAACa,WAAL,CAAiBE,OAD7C,EACsD,GADtD,CADF,eAKE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGf,IAAI,CAACa,WAAL,CAAiBG,IADpB,CALF,eASE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,OAApB;AAA4B,IAAA,SAAS,EAAC,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,IAAI,CAACa,WAAL,CAAiBA,WADpB,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,OAI2Bb,IAAI,CAACa,WAAL,CAAiBI,QAJ5C,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,OAM2BjB,IAAI,CAACa,WAAL,CAAiBK,QAN5C,CATF,CADF,eAmBE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAFT;AAGE,IAAA,OAAO,EAAE,MAAM;AACb,YAAMC,UAAU,GAAGpB,IAAI,CAACY,EAAxB;AACA,YAAMS,eAAe,GAAGzB,MAAM,CAAC0B,MAAP,CACrBC,IAAD,IAAUA,IAAI,CAACX,EAAL,KAAYQ,UADA,CAAxB;AAGAvB,MAAAA,SAAS,CAACwB,eAAD,CAAT;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,CADD,CApCH,CADF;AAwED","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\nimport {fetchWeather} from \"./api/index\";\n\nexport default function Weather() {\n  const [cities, setCities] = useState([]);\n  const [hasError, setHasError] = useState(false);\n  const [city, setCity] = useState(\"\");\n\n//   const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\n//   const getWeather = (cityName) => {\n//     const END_POINT = `http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric`;\n//     fetch(END_POINT)\n//       .then((resp) => {\n//         if (!resp.ok) {\n//           throw Error(resp.statusText);\n//         }\n//         return resp.json();\n//       })\n//       .then((response) => {\n//         const {\n//           name,\n//           sys: { country },\n//           main: { temp_max, temp_min },\n//           weather: [{ main, description }],\n//           coord: { lat, lon },\n//         } = response;\n//         setCities([\n//           ...cities,\n//           {\n//             description: {\n//               name,\n//               country,\n//               main,\n//               description,\n//               lat,\n//               lon,\n//               temp_max,\n//               temp_min,\n//             },\n//             id: Date.now(),\n//           },\n//         ]);\n//         setHasError(false);\n//       })\n//       .catch((error) => {\n//         setHasError(true);\n//       });\n//   };\n\n  const searchCityWeather = () => {\n    // getWeather(city);\n    // setCity(\"\");\n    const weatherData = fetchWeather(city);\n    weatherData.then(response => console.log(response));\n    setCity(\"\");\n  };\n\n  return (\n    <div>\n      <form noValidate autoComplete=\"off\">\n        <TextField\n          className=\"input\"\n          id=\"outlined-basic\"\n          label=\"City\"\n          variant=\"outlined\"\n          value={city}\n          onChange={(event) => {\n            setCity(event.target.value);\n          }}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={searchCityWeather}\n        >\n          Search\n        </Button>\n      </form>\n\n      {hasError && (\n        <Card>\n          {\" \"}\n          <CardContent>\n            {\" \"}\n            <Typography variant=\"h5\" component=\"h2\" color=\"secondary\">\n              ERROR\n            </Typography>\n            <Typography variant=\"h5\" color=\"secondary\">\n              Please be sure to enter a meaningful city name!\n            </Typography>\n          </CardContent>\n        </Card>\n      )}\n\n      {cities.map((city) => (\n        <Card className=\"container\" key={city.id}>\n          <CardContent>\n            <Typography variant=\"h5\" component=\"h2\">\n              {city.description.name}, {city.description.country}{\" \"}\n            </Typography>\n\n            <Typography color=\"textSecondary\">\n              {city.description.main}\n            </Typography>\n\n            <Typography variant=\"body2\" component=\"p\">\n              {city.description.description}\n              <br />\n              <br />\n              <span>min temp: </span> {city.description.temp_min}\n              <br />\n              <span>max temp: </span> {city.description.temp_max}\n            </Typography>\n          </CardContent>\n          <HighlightOffIcon\n            color=\"secondary\"\n            style={{ fontSize: 40 }}\n            onClick={() => {\n              const selectedId = city.id;\n              const remainingCities = cities.filter(\n                (item) => item.id !== selectedId\n              );\n              setCities(remainingCities);\n            }}\n          />\n        </Card>\n      ))}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}