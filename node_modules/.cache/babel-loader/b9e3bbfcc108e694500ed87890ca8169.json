{"ast":null,"code":"var _jsxFileName = \"/Users/HackYourFuture/Desktop/Week4/homework/weather-app-4/src/Forecast.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport Chart from \"./Chart\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Error from \"./Error\";\nimport Button from '@material-ui/core/Button';\nimport { LineChart, XAxis, YAxis, Tooltip, CartesianGrid, Line, Legend } from \"recharts\";\nconst KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\nfunction Forecast() {\n  const {\n    cityName\n  } = useParams();\n  const history = useHistory();\n  const [dataToDraw, setDataToDraw] = useState([]);\n  const [hasError, setError] = useState(false);\n\n  const fetchDetails = async name => {\n    try {\n      const data = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${name}&units=metric&appid=${KEY}`);\n      let fiveDaysData = await data.json();\n      console.log(fiveDaysData);\n      let chartData = [];\n\n      for (let i = 0; i < fiveDaysData.list.length; i++) {\n        chartData = [...chartData, {\n          name: fiveDaysData.list[i].dt_txt,\n          pv: fiveDaysData.list[i].main.temp\n        }];\n        if (i > 120) break;\n      }\n\n      return chartData;\n    } catch (error) {\n      setError(true);\n      console.error(error);\n    }\n  };\n\n  function navigateToHome() {\n    history.push(\"/\");\n  }\n\n  useEffect(() => {\n    fetchDetails(cityName).then(data => setDataToDraw(data));\n  }, []);\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, \"  \", /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"5 day forecast\"), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, cityName), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, hasError && /*#__PURE__*/React.createElement(Error, {\n    message: \"Oppsss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 24\n    }\n  }), !hasError && /*#__PURE__*/React.createElement(LineChart, {\n    width: 600,\n    height: 300,\n    data: dataToDraw,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 28\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"pv\",\n    stroke: \"#8884d8\",\n    activeDot: {\n      r: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: navigateToHome,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Home\")));\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/HackYourFuture/Desktop/Week4/homework/weather-app-4/src/Forecast.js"],"names":["React","useEffect","useState","useParams","useHistory","Chart","Card","CardContent","Typography","Error","Button","LineChart","XAxis","YAxis","Tooltip","CartesianGrid","Line","Legend","KEY","process","env","REACT_APP_OPENWEATHERMAP_API_KEY","Forecast","cityName","history","dataToDraw","setDataToDraw","hasError","setError","fetchDetails","name","data","fetch","fiveDaysData","json","console","log","chartData","i","list","length","dt_txt","pv","main","temp","error","navigateToHome","push","then","top","right","left","bottom","r"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport Chart from \"./Chart\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Error from \"./Error\";\nimport Button from '@material-ui/core/Button';\nimport {\n    LineChart,\n    XAxis,\n    YAxis,\n    Tooltip,\n    CartesianGrid,\n    Line,\n    Legend,\n  } from \"recharts\";\nconst KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\nfunction Forecast() {\n  const { cityName } = useParams();\n  const history = useHistory();\n  const [dataToDraw, setDataToDraw] = useState([]);\n  const [hasError, setError] = useState(false);\n\n  const fetchDetails = async (name) => {\n    try {\n      const data = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${name}&units=metric&appid=${KEY}`\n      );\n      let fiveDaysData = await data.json();\n      console.log(fiveDaysData);\n      let chartData = [];\n\n      for (let i = 0; i < fiveDaysData.list.length; i++) {\n        chartData = [\n          ...chartData,\n          {\n            name: fiveDaysData.list[i].dt_txt,\n            pv: fiveDaysData.list[i].main.temp,\n          },\n        ];\n        if(i>120) break;\n      }\n\n      return chartData;\n    } catch (error) {\n      setError(true);\n      console.error(error);\n    }\n  };\n\n  function navigateToHome() {\n    history.push(\"/\");\n  }\n\n  useEffect(() => {\n    fetchDetails(cityName).then((data) => setDataToDraw(data));\n  }, []);\n\n  return (\n    <Card>  <h1>5 day forecast</h1>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          {cityName}\n        </Typography>\n\n        <Typography>\n          {hasError && <Error message=\"Oppsss\" />}\n          {!hasError &&    <LineChart\n      width={600}\n      height={300}\n      data={dataToDraw}\n      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n    \n    >\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <Tooltip />\n      <Legend />\n      <Line\n\n        type=\"monotone\"\n        dataKey=\"pv\"\n        stroke=\"#8884d8\"\n        activeDot={{ r: 8 }}\n      />\n    </LineChart>}\n        </Typography>\n        <Button variant=\"contained\" color=\"secondary\" onClick={navigateToHome}>\n            Home\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}