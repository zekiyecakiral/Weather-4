{"ast":null,"code":"var _jsxFileName = \"/Users/HackYourFuture/Desktop/Week4/homework/weather-app-4/src/Weather.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport CityCard from \"./CityCard\";\nexport default function Weather() {\n  const [cities, setCities] = useState([]);\n  const [hasError, setHasError] = useState(false);\n  const [city, setCity] = useState(\"\");\n  const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\n  const getWeather = cityName => {\n    const END_POINT = `http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric`;\n    fetch(END_POINT).then(resp => {\n      if (!resp.ok) {\n        throw Error(resp.statusText);\n      }\n\n      return resp.json();\n    }).then(response => {\n      const {\n        name,\n        sys: {\n          country\n        },\n        main: {\n          temp_max,\n          temp_min\n        },\n        weather: [{\n          main,\n          description\n        }],\n        coord: {\n          lat,\n          lon\n        }\n      } = response;\n      setCities([...cities, {\n        description: {\n          name,\n          country,\n          main,\n          description,\n          lat,\n          lon,\n          temp_max,\n          temp_min\n        },\n        id: Date.now()\n      }]);\n      setHasError(false);\n    }).catch(error => {\n      setHasError(true);\n    });\n  };\n\n  const searchCityWeather = () => {\n    getWeather(city);\n    setCity(\"\");\n  };\n\n  function removeCity(cityID) {\n    const remainingCities = cities.filter(item => item.id !== cityID);\n    setCities(remainingCities);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: \"input\",\n    id: \"outlined-basic\",\n    label: \"City\",\n    variant: \"outlined\",\n    value: city,\n    onChange: event => {\n      setCity(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: searchCityWeather,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"Search\")), hasError && /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \" \", /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, \" \", /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"ERROR\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \"Please be sure to enter a meaningful city name!\"))), cities.map(city => /*#__PURE__*/React.createElement(Link, {\n    className: \"linkClass\",\n    to: `/${city.description.name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CityCard, {\n    city: city,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/HackYourFuture/Desktop/Week4/homework/weather-app-4/src/Weather.js"],"names":["React","useState","Button","TextField","Card","CardContent","Typography","HighlightOffIcon","BrowserRouter","Router","Switch","Route","Link","CityCard","Weather","cities","setCities","hasError","setHasError","city","setCity","API_KEY","process","env","REACT_APP_OPENWEATHERMAP_API_KEY","getWeather","cityName","END_POINT","fetch","then","resp","ok","Error","statusText","json","response","name","sys","country","main","temp_max","temp_min","weather","description","coord","lat","lon","id","Date","now","catch","error","searchCityWeather","removeCity","cityID","remainingCities","filter","item","event","target","value","map"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\nimport CityCard from \"./CityCard\";\n\n\nexport default function Weather() {\n  const [cities, setCities] = useState([]);\n  const [hasError, setHasError] = useState(false);\n  const [city, setCity] = useState(\"\");\n\n  const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\n  const getWeather = (cityName) => {\n    const END_POINT = `http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric`;\n    fetch(END_POINT)\n      .then((resp) => {\n        if (!resp.ok) {\n          throw Error(resp.statusText);\n        }\n        return resp.json();\n      })\n      .then((response) => {\n        const {\n          name,\n          sys: { country },\n          main: { temp_max, temp_min },\n          weather: [{ main, description }],\n          coord: { lat, lon },\n        } = response;\n        setCities([\n          ...cities,\n          {\n            description: {\n              name,\n              country,\n              main,\n              description,\n              lat,\n              lon,\n              temp_max,\n              temp_min,\n            },\n            id: Date.now(),\n          },\n        ]);\n        setHasError(false);\n      })\n      .catch((error) => {\n        setHasError(true);\n      });\n  };\n\n  const searchCityWeather = () => {\n    getWeather(city);\n    setCity(\"\");\n  };\n\n  function removeCity(cityID){\n    const remainingCities = cities.filter(\n      (item) => item.id !== cityID\n    );\n    setCities(remainingCities);\n  }\n\n  return (\n    <div>\n      <form noValidate autoComplete=\"off\" >\n        <TextField\n          className=\"input\"\n          id=\"outlined-basic\"\n          label=\"City\"\n          variant=\"outlined\"\n          value={city}\n          onChange={(event) => {\n            setCity(event.target.value);\n          }}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={searchCityWeather}\n        >\n          Search\n        </Button>\n      </form>\n\n      {hasError && (\n        <Card>\n          {\" \"}\n          <CardContent>\n            {\" \"}\n            <Typography variant=\"h5\" component=\"h2\" color=\"secondary\">\n              ERROR\n            </Typography>\n            <Typography variant=\"h5\" color=\"secondary\">\n              Please be sure to enter a meaningful city name!\n            </Typography>\n          </CardContent>\n        </Card>\n      )}\n\n      {cities.map((city) => (\n        <Link className=\"linkClass\" to={`/${city.description.name}`}>\n          <CityCard city={city}/>\n        {/* <Card className=\"container\" key={city.id}>\n     \n          <CardContent>\n            <Typography variant=\"h5\" component=\"h2\">\n              {city.description.name}, {city.description.country}{\" \"}\n            </Typography>\n\n            <Typography color=\"textSecondary\">\n              {city.description.main}\n            </Typography>\n\n            <Typography variant=\"body2\" component=\"p\">\n              {city.description.description}\n              <br />\n              <br />\n              <span>min temp: </span> {city.description.temp_min}\n              <br />\n              <span>max temp: </span> {city.description.temp_max}\n            </Typography>\n          </CardContent>\n          <HighlightOffIcon\n            color=\"secondary\"\n            style={{ fontSize: 40 }}\n            onClick={() => {\n              const selectedId = city.id;\n              const remainingCities = cities.filter(\n                (item) => item.id !== selectedId\n              );\n              setCities(remainingCities);\n            }}\n          />\n       \n        </Card>    */}\n           </Link>\n      ))\n  \n      }\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}